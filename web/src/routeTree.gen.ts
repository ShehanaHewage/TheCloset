/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AdminRouteImport } from './routes/admin/route';
import { Route as IndexImport } from './routes/index';
import { Route as ProfileIndexImport } from './routes/profile/index';
import { Route as CatalogIndexImport } from './routes/catalog/index';
import { Route as CartIndexImport } from './routes/cart/index';
import { Route as CatalogIdImport } from './routes/catalog/$id';
import { Route as CartCheckoutImport } from './routes/cart/checkout';
import { Route as AuthRegisterImport } from './routes/auth/register';
import { Route as AuthLoginImport } from './routes/auth/login';
import { Route as AdminOrdersIndexImport } from './routes/admin/orders/index';
import { Route as AdminItemsIndexImport } from './routes/admin/items/index';
import { Route as AdminItemsCreateImport } from './routes/admin/items/create';
import { Route as AdminOrdersIdIndexImport } from './routes/admin/orders/$id/index';
import { Route as AdminItemsIdIndexImport } from './routes/admin/items/$id/index';
import { Route as AdminItemsIdEditImport } from './routes/admin/items/$id/edit';

// Create/Update Routes

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const ProfileIndexRoute = ProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any);

const CatalogIndexRoute = CatalogIndexImport.update({
  id: '/catalog/',
  path: '/catalog/',
  getParentRoute: () => rootRoute,
} as any);

const CartIndexRoute = CartIndexImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRoute,
} as any);

const CatalogIdRoute = CatalogIdImport.update({
  id: '/catalog/$id',
  path: '/catalog/$id',
  getParentRoute: () => rootRoute,
} as any);

const CartCheckoutRoute = CartCheckoutImport.update({
  id: '/cart/checkout',
  path: '/cart/checkout',
  getParentRoute: () => rootRoute,
} as any);

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any);

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any);

const AdminOrdersIndexRoute = AdminOrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => AdminRouteRoute,
} as any);

const AdminItemsIndexRoute = AdminItemsIndexImport.update({
  id: '/items/',
  path: '/items/',
  getParentRoute: () => AdminRouteRoute,
} as any);

const AdminItemsCreateRoute = AdminItemsCreateImport.update({
  id: '/items/create',
  path: '/items/create',
  getParentRoute: () => AdminRouteRoute,
} as any);

const AdminOrdersIdIndexRoute = AdminOrdersIdIndexImport.update({
  id: '/orders/$id/',
  path: '/orders/$id/',
  getParentRoute: () => AdminRouteRoute,
} as any);

const AdminItemsIdIndexRoute = AdminItemsIdIndexImport.update({
  id: '/items/$id/',
  path: '/items/$id/',
  getParentRoute: () => AdminRouteRoute,
} as any);

const AdminItemsIdEditRoute = AdminItemsIdEditImport.update({
  id: '/items/$id/edit',
  path: '/items/$id/edit',
  getParentRoute: () => AdminRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/admin': {
      id: '/admin';
      path: '/admin';
      fullPath: '/admin';
      preLoaderRoute: typeof AdminRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/login': {
      id: '/auth/login';
      path: '/auth/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/register': {
      id: '/auth/register';
      path: '/auth/register';
      fullPath: '/auth/register';
      preLoaderRoute: typeof AuthRegisterImport;
      parentRoute: typeof rootRoute;
    };
    '/cart/checkout': {
      id: '/cart/checkout';
      path: '/cart/checkout';
      fullPath: '/cart/checkout';
      preLoaderRoute: typeof CartCheckoutImport;
      parentRoute: typeof rootRoute;
    };
    '/catalog/$id': {
      id: '/catalog/$id';
      path: '/catalog/$id';
      fullPath: '/catalog/$id';
      preLoaderRoute: typeof CatalogIdImport;
      parentRoute: typeof rootRoute;
    };
    '/cart/': {
      id: '/cart/';
      path: '/cart';
      fullPath: '/cart';
      preLoaderRoute: typeof CartIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/catalog/': {
      id: '/catalog/';
      path: '/catalog';
      fullPath: '/catalog';
      preLoaderRoute: typeof CatalogIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/profile/': {
      id: '/profile/';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof ProfileIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/admin/items/create': {
      id: '/admin/items/create';
      path: '/items/create';
      fullPath: '/admin/items/create';
      preLoaderRoute: typeof AdminItemsCreateImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/items/': {
      id: '/admin/items/';
      path: '/items';
      fullPath: '/admin/items';
      preLoaderRoute: typeof AdminItemsIndexImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/orders/': {
      id: '/admin/orders/';
      path: '/orders';
      fullPath: '/admin/orders';
      preLoaderRoute: typeof AdminOrdersIndexImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/items/$id/edit': {
      id: '/admin/items/$id/edit';
      path: '/items/$id/edit';
      fullPath: '/admin/items/$id/edit';
      preLoaderRoute: typeof AdminItemsIdEditImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/items/$id/': {
      id: '/admin/items/$id/';
      path: '/items/$id';
      fullPath: '/admin/items/$id';
      preLoaderRoute: typeof AdminItemsIdIndexImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/orders/$id/': {
      id: '/admin/orders/$id/';
      path: '/orders/$id';
      fullPath: '/admin/orders/$id';
      preLoaderRoute: typeof AdminOrdersIdIndexImport;
      parentRoute: typeof AdminRouteImport;
    };
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminItemsCreateRoute: typeof AdminItemsCreateRoute;
  AdminItemsIndexRoute: typeof AdminItemsIndexRoute;
  AdminOrdersIndexRoute: typeof AdminOrdersIndexRoute;
  AdminItemsIdEditRoute: typeof AdminItemsIdEditRoute;
  AdminItemsIdIndexRoute: typeof AdminItemsIdIndexRoute;
  AdminOrdersIdIndexRoute: typeof AdminOrdersIdIndexRoute;
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminItemsCreateRoute: AdminItemsCreateRoute,
  AdminItemsIndexRoute: AdminItemsIndexRoute,
  AdminOrdersIndexRoute: AdminOrdersIndexRoute,
  AdminItemsIdEditRoute: AdminItemsIdEditRoute,
  AdminItemsIdIndexRoute: AdminItemsIdIndexRoute,
  AdminOrdersIdIndexRoute: AdminOrdersIdIndexRoute,
};

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(AdminRouteRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/admin': typeof AdminRouteRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/register': typeof AuthRegisterRoute;
  '/cart/checkout': typeof CartCheckoutRoute;
  '/catalog/$id': typeof CatalogIdRoute;
  '/cart': typeof CartIndexRoute;
  '/catalog': typeof CatalogIndexRoute;
  '/profile': typeof ProfileIndexRoute;
  '/admin/items/create': typeof AdminItemsCreateRoute;
  '/admin/items': typeof AdminItemsIndexRoute;
  '/admin/orders': typeof AdminOrdersIndexRoute;
  '/admin/items/$id/edit': typeof AdminItemsIdEditRoute;
  '/admin/items/$id': typeof AdminItemsIdIndexRoute;
  '/admin/orders/$id': typeof AdminOrdersIdIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/admin': typeof AdminRouteRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/register': typeof AuthRegisterRoute;
  '/cart/checkout': typeof CartCheckoutRoute;
  '/catalog/$id': typeof CatalogIdRoute;
  '/cart': typeof CartIndexRoute;
  '/catalog': typeof CatalogIndexRoute;
  '/profile': typeof ProfileIndexRoute;
  '/admin/items/create': typeof AdminItemsCreateRoute;
  '/admin/items': typeof AdminItemsIndexRoute;
  '/admin/orders': typeof AdminOrdersIndexRoute;
  '/admin/items/$id/edit': typeof AdminItemsIdEditRoute;
  '/admin/items/$id': typeof AdminItemsIdIndexRoute;
  '/admin/orders/$id': typeof AdminOrdersIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/admin': typeof AdminRouteRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/register': typeof AuthRegisterRoute;
  '/cart/checkout': typeof CartCheckoutRoute;
  '/catalog/$id': typeof CatalogIdRoute;
  '/cart/': typeof CartIndexRoute;
  '/catalog/': typeof CatalogIndexRoute;
  '/profile/': typeof ProfileIndexRoute;
  '/admin/items/create': typeof AdminItemsCreateRoute;
  '/admin/items/': typeof AdminItemsIndexRoute;
  '/admin/orders/': typeof AdminOrdersIndexRoute;
  '/admin/items/$id/edit': typeof AdminItemsIdEditRoute;
  '/admin/items/$id/': typeof AdminItemsIdIndexRoute;
  '/admin/orders/$id/': typeof AdminOrdersIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/admin'
    | '/auth/login'
    | '/auth/register'
    | '/cart/checkout'
    | '/catalog/$id'
    | '/cart'
    | '/catalog'
    | '/profile'
    | '/admin/items/create'
    | '/admin/items'
    | '/admin/orders'
    | '/admin/items/$id/edit'
    | '/admin/items/$id'
    | '/admin/orders/$id';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/admin'
    | '/auth/login'
    | '/auth/register'
    | '/cart/checkout'
    | '/catalog/$id'
    | '/cart'
    | '/catalog'
    | '/profile'
    | '/admin/items/create'
    | '/admin/items'
    | '/admin/orders'
    | '/admin/items/$id/edit'
    | '/admin/items/$id'
    | '/admin/orders/$id';
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/auth/login'
    | '/auth/register'
    | '/cart/checkout'
    | '/catalog/$id'
    | '/cart/'
    | '/catalog/'
    | '/profile/'
    | '/admin/items/create'
    | '/admin/items/'
    | '/admin/orders/'
    | '/admin/items/$id/edit'
    | '/admin/items/$id/'
    | '/admin/orders/$id/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AdminRouteRoute: typeof AdminRouteRouteWithChildren;
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthRegisterRoute: typeof AuthRegisterRoute;
  CartCheckoutRoute: typeof CartCheckoutRoute;
  CatalogIdRoute: typeof CatalogIdRoute;
  CartIndexRoute: typeof CartIndexRoute;
  CatalogIndexRoute: typeof CatalogIndexRoute;
  ProfileIndexRoute: typeof ProfileIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  CartCheckoutRoute: CartCheckoutRoute,
  CatalogIdRoute: CatalogIdRoute,
  CartIndexRoute: CartIndexRoute,
  CatalogIndexRoute: CatalogIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/auth/login",
        "/auth/register",
        "/cart/checkout",
        "/catalog/$id",
        "/cart/",
        "/catalog/",
        "/profile/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/items/create",
        "/admin/items/",
        "/admin/orders/",
        "/admin/items/$id/edit",
        "/admin/items/$id/",
        "/admin/orders/$id/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/cart/checkout": {
      "filePath": "cart/checkout.tsx"
    },
    "/catalog/$id": {
      "filePath": "catalog/$id.tsx"
    },
    "/cart/": {
      "filePath": "cart/index.tsx"
    },
    "/catalog/": {
      "filePath": "catalog/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    },
    "/admin/items/create": {
      "filePath": "admin/items/create.tsx",
      "parent": "/admin"
    },
    "/admin/items/": {
      "filePath": "admin/items/index.tsx",
      "parent": "/admin"
    },
    "/admin/orders/": {
      "filePath": "admin/orders/index.tsx",
      "parent": "/admin"
    },
    "/admin/items/$id/edit": {
      "filePath": "admin/items/$id/edit.tsx",
      "parent": "/admin"
    },
    "/admin/items/$id/": {
      "filePath": "admin/items/$id/index.tsx",
      "parent": "/admin"
    },
    "/admin/orders/$id/": {
      "filePath": "admin/orders/$id/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
